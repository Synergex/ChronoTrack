;;**********************************************************************
;;
;; Title:       CustomerContactDataEntity.dbc
;;
;; Type:        Class
;;
;; Description: Class to allow access to the contact data file.
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
;;
;; ChronoTrack is an application written and managed by the Synergex Professional Services Group.
;;
;;***********************************************************************************

.include "DEF:ChronoTrack.def"

namespace SynPSG.ChronoTrack.DataEntities

    public sealed class CustomerContactDataEntity extends SynPSG.Core.DataEntities.SDMSBase

        ;;allow the class to be referenced as a singleton
        private static mInternalData    ,@CustomerContactDataEntity

        public static property Instance ,@CustomerContactDataEntity
        method get
        proc
            if (mInternalData == ^null)
                mInternalData = new CustomerContactDataEntity(true, TableView.Full)
            mreturn mInternalData
        endmethod
        endproperty

        ;;-------------------------------------------------------------------------
        ;;private fields
        ;;-------------------------------------------------------------------------

        ;;;<summary> private user record area </summary>
        .include 'Customer_Contact' repository, private record = "mCustomerContact", prefix="m"  ,end
        .include 'Customer_Contact' repository, private structure = "sCustomerContact", prefix="s"  ,end

        ;;*************************************************************************

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <remarks>
        ;;; Constructor defines the file name and opens the file.  Creates the
        ;;; required event handler classes
        ;;; </remarks>
        ;;; <param name=viewType>type of table/collection view to provide</param>
        ;;; <param name=noDotNet>Pass TRUE to prevent the .NET framework being loaded</param>
        public method CustomerContactDataEntity
            in  req noDotNet            ,boolean
            in  req viewType            ,SynPSG.Core.DataEntities.TableView
            endparams
            parent("DAT:contact.ism",              ;;file name
            &   new CustomerContactPreStore(),      ;;pre store event handler
            &   ^null,                              ;;post store event handler
            &   new CustomerContactPreUpdate(),     ;;pre update event handler
            &   ^null,                              ;;update conflict event handler
            &   ^null,                              ;;format transaction view event handler
            &   ^null,                              ;;on delete event handler
            &   viewType,                           ;;table/collection view type
            &   "CustomerContact",                  ;;tableName
            &   new CustomerContactDefineTable(),   ;;define DataTable columns event handler
            &   new CustomerContactUpdateFields(),  ;;field update event handler
            &   "CustomerContactCollection",        ;;collection name
            &   (@sCustomerContact) str,            ;;collection object
            &   ^null,                              ;;load collection event handler
            &   noDotNet)                           ;;do we load the framework?

            record
                str ,sCustomerContact
            endrecord
        proc

            this.IO.SetReplicationDetails("CUSTOMER_CONTACT", mCustomerContact, mCustomerContact.mreplication_key)

            mreturn

        endmethod

        ;;*************************************************************************

        ;;; <summary>
        ;;; Expose the data as a DataTable object
        ;;; </summary>
        ;;; <remarks>
        ;;; Expose the data as a DataTable object.  This method returns
        ;;; all data in the file as a DataTable unless the filter argument is passed.
        ;;; </remarks>
        ;;; <param name=primaryKey>optionally pass a filter on the primary key</param>
        ;;; <returns>Populated DataTable</returns>
.ifdef OS_WINDOWSNT
        public method ResultsTable  ,@System.Data.DataTable
            in  opt primaryKey      ,a
            endparams

            record locrec
                row     ,@DataRow
                status  ,boolean
                gotKey  ,boolean
                tmpID   ,a^size(mCustomerContact.mcustomer_id)
            endrecord
        proc
            init locrec
            this.DataTable.Clear()

            ;;now add the actual data
            if (^passed(primaryKey))
            then
            begin
                gotKey = true
                tmpID = primaryKey
                status = this.IO.Locate(tmpID, 0, false)
            end
            else
            begin
                gotKey = false
                status = this.IO.ReadFirst(Q_PRIMARY, false)
            end

            while ((status && !gotKey) || (status && gotKey && this.IO.PrimaryKeyValue .eq. tmpID))
            begin
                debugInfo("CustomerContactDataEntity::DataTable : Creating a new row")

                row = this.DataTable.Table.NewRow()

                mCustomerContact = this.IO.DataArea

                row[0] = Conversion.ToNetGRFA(this.IO.GRFA)
                row[1] = Conversion.ToNetString(mCustomerContact.mCustomer_ID)
                row[2] = Conversion.ToNetInteger(mCustomerContact.mContact_ID)
                row[3] = Conversion.ToNetString(mCustomerContact.mFirst_Name)
                row[4] = Conversion.ToNetString(mCustomerContact.mLast_Name)
                row[5] = Conversion.ToNetString(mCustomerContact.mTitle)
                row[6] = Conversion.ToNetInteger(mCustomerContact.mCurrent_Location)
                row[7] = Conversion.ToNetString(mCustomerContact.mOffice_Phone)
                row[8] = Conversion.ToNetString(mCustomerContact.mMobile_Phone)
                row[9] = Conversion.ToNetString(mCustomerContact.mEmail)
                row[10] = Conversion.ToNetString(mCustomerContact.mPicture_File)
                row[11] = Conversion.ToNetString(mCustomerContact.mFriendly_name)
                row[12] = Conversion.ToNetString(mCustomerContact.mReplication_Key)

                this.DataTable.Table.Rows.Add(row)

                debugInfo("CustomerContactDataEntity::DataTable : Row added to table, key : " + mCustomerContact.mCustomer_ID)

                status = this.IO.ReadNext(false)
            end

            ;;commit the added rows to the table
            this.DataTable.Table.AcceptChanges()

            mreturn this.DataTable.Table

        endmethod
.endc
    endclass

endnamespace

