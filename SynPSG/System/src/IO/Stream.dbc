;;**********************************************************************
;;
;; Title:       Stream.dbc
;;
;; Type:        Public Abstract Class
;;
;; Description:
;;
;; Author:      Tod Phillips, Synergex Professional Services Group
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
namespace SynPSG.System.IO
    ;;--------------------------------------------------------------------
    ;;public class enumerations
    ;;--------------------------------------------------------------------
    public enum SeekOrigin
        fromBegin
        fromCurrent
        fromEnd
    endenum

    public enum FileMode
        Append
        Create
        CreateNew
        Open
        OpenOrCreate
        Truncate
    endenum
    ;;--------------------------------------------------------------------

    ;;;<summary>
    ;;;Provides a generic view of a sequence of bytes.
    ;;;</summary>
    ;;;<remarks>
    ;;;Streams involve three fundamental operations:
    ;;; 1) You can read from streams. Reading is the transfer of data from a stream into a data structure,
    ;;;    such as an array of bytes.
    ;;; 2) You can write to streams. Writing is the transfer of data from a data structure into a stream.
    ;;; 3) Streams can support seeking. Seeking is the querying and modifying of the current position
    ;;;    within a stream. Seek capability depends on the kind of backing store a stream has. For example,
    ;;;    network streams have no unified concept of a current position, and therefore typically do not
    ;;;    support seeking.
    ;;;
    ;;;Stream is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes,
    ;;;such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The
    ;;;Stream class and its derived classes provide a generic view of these different types of input and
    ;;;output, isolating the programmer from the specific details of the operating system and the
    ;;;underlying devices.
    ;;;
    ;;;Depending on the underlying data source or repository, streams might support only some of these
    ;;;capabilities. An application can query a stream for its capabilities by using the CanRead, CanWrite,
    ;;;and CanSeek properties.
    ;;;
    ;;;The Read and Write methods read and write data in a variety of formats. For streams that support
    ;;;seeking, use the Seek and SetLength methods and the Position and Length properties to query and
    ;;; modify the current position and length of a stream.
    ;;;</remarks>

    public abstract class Stream

        ;;--------------------------------------------------------------------

        ;;;<summary>Initializes a new instance of the Stream class.</summary>
        public method Stream
        proc
        endmethod

        ;;********************************************************************

        ;;;<summary>When overridden in a derviced class, gets a value indicating whether
        ;;;the current stream supports reading.</summary>
        public abstract property CanRead    ,boolean
            method get
            proc
            endmethod
        endproperty

        ;;********************************************************************

        ;;;<summary>When overridden in a derived class, gets a value indicating whether the
        ;;;current stream supports seeking.</summary>
        public abstract property CanSeek    ,boolean
            method get
            proc
            endmethod
        endproperty

        ;;********************************************************************

        ;;;<summary>When overridden in a derived class, gets a value indicating whether the
        ;;;current stream supports writing.</summary>
        public abstract property CanWrite   ,boolean
            method get
            proc
            endmethod
        endproperty

        ;;********************************************************************

        ;;;<summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
        public abstract property Length ,integer
            method get
            proc
            endmethod
        endproperty

        ;;********************************************************************

        ;;;<summary>When overridden in a derived class, gets or sets the position within the
        ;;;current stream.</summary>
        public abstract property Position   ,integer
            method get
            proc
            endmethod
        endproperty

        ;;********************************************************************

        ;;;<summary>When overridden in a derived class, clears all buffers for this stream and
        ;;;causes any buffered data to be written to the underlying device.</summary>
        public abstract method Flush    ,void
        proc
        endmethod

        ;;********************************************************************

        ;;;<summary>When overridden in a derived class, sets the position within the current stream.</summary>
        public abstract method Seek ,integer
            in offset   ,integer
            in origin   ,SeekOrigin
            endparams
        proc
        endmethod

        ;;********************************************************************

        ;;;<summary>When overridden in a derived class, sets the length of the current stream.</summary>
        public abstract method SetLength    ,void
            in length   ,integer
            endparams
        proc
        endmethod
    endclass
endnamespace
