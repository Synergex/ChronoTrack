;;**********************************************************************
;;
;; Title:       ProjectRoutines.dbl
;;
;; Type:        Subroutine (collection)
;;
;; Description: routines to allow remote access to the Project data file
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
;;
;; ChronoTrack is an application written and managed by the Synergex Professional Services Group.
;;
;;***********************************************************************************

.include "DEF:ChronoTrack.def"
.include "PROJECT" repository, structure="sProject", end
.include "PROJECT_COMBINED" repository, structure="sProjectCombined", end

;;; <summary>
;;; get_project
;;; </summary>
;;; <remarks>
;;; using the passed key locate te required project record on the primary key
;;; </remark>
;;; <param name=projectID>required project id to locate</param>
;;; <param name=projectData>returned project record area></param>
;;; <return type="Boolean">true = success, false = error</returns>
function get_project            ,boolean
    required in  userToken      ,a22
    required in  projectID      ,d8
    required out projectData    ,sProject
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;attempt to locate given key value
    result = ProjectDataEntity.Instance.IO.Locate(%string(projectID,"XXXXXXXX"),Q_PRIMARY,false)

    ;;set the data area
    projectData = ProjectDataEntity.Instance.IO.DataArea

    ;;record any possible error message
    lastErrorMsg = ProjectDataEntity.Instance.IO.LastErrorMessage

    freturn result

endfunction

;;; <summary>
;;; create_project
;;; </summary>
;;; <remarks>
;;; pass in the record data and attempt to create it
;;; </remark>
;;; <param name=projectData>passed project record area></param>
;;; <return type="Boolean">true = success, false = error</returns>
function create_project         ,boolean
    required in    userToken    ,a22
    required inout projectData  ,sProject
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;set the data area
    ProjectDataEntity.Instance.IO.DataArea = projectData

    ;;create the record
    result = ProjectDataEntity.Instance.IO.Create()
    projectData = ProjectDataEntity.Instance.IO.DataArea
    lastErrorMsg = ProjectDataEntity.Instance.IO.LastErrorMessage

    freturn result

endfunction

;;; <summary>
;;; get_Project_table
;;; return the Project data as a Array List
;;; </summary>
;;; <remarks>
;;; Return the contents of the Project file as an array list which is
;;; then converted to a DataTable by xfNetLink.NET
;;; </remark>
;;; <param name=projectTable>returned project table></param>
;;; <param name=customerKeySearch>search on the customer key</param>
;;; <param name=projectDateKeySearch>search on the date key</param>
;;; <param name=consultantKeySearch>search on a consultant key</param>
;;; <return type="Boolean">true = success, false = error</returns>
function get_project_table              ,boolean
    required in  userToken              ,a22
    required out projectTable           ,@ArrayList
    required in  customerKeySearch      ,a10
    required in  projectDateKeySearch   ,d8
    required in  consultantKeySearch    ,a15
    endparams

    .include "DEF:Server.def"

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;create the collection based on the passed search key and filter
    if (customerKeySearch) then
        projectTable = ProjectDataEntity.Instance.DataCollection.Collection(customerKeySearch,Q_ALT1)
    else
    begin
        if (projectDateKeySearch && (projectDateKeySearch!=19000101)) then
            projectTable = ProjectDataEntity.Instance.DataCollection.Collection(%string(projectDateKeySearch,"XXXXXXXX"),Q_ALT2)
        else
        begin
            if (consultantKeySearch) then
                projectTable = ProjectDataEntity.Instance.DataCollection.Collection(consultantKeySearch,Q_ALT3)
            else
                projectTable = ProjectDataEntity.Instance.DataCollection.Collection()
        end
    end

    freturn true

endfunction

;;; <summary>
;;; get_Project_table_combined
;;; return the Project and customer combined data as a Array List
;;; </summary>
;;; <remarks>
;;; Return the contents of the Project including the customer information
;;; </remark>
;;; <param name=projectTable>returned project table></param>
;;; <param name=customerKeySearch>search on the customer key</param>
;;; <param name=projectDateKeySearch>search on the date key</param>
;;; <param name=consultantKeySearch>search on a consultant key</param>
;;; <return type="Boolean">true = success, false = error</returns>
function get_project_table_combined ,boolean
    required in  userToken              ,a22
    required out projectTable           ,@ArrayList
    required in  customerKeySearch      ,a10
    required in  projectDateKeySearch   ,d8
    required in  consultantKeySearch    ,a15
    endparams

    .include "DEF:Server.def"

    record
        bRec    ,sProjectCombined
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;create the collection based on the passed search key and filter
    if (customerKeySearch) then
        projectTable = ProjectDataEntity.Instance.DataCollection.Collection(TableView.Combined,(@sProjectCombined)bRec,customerKeySearch,Q_ALT1)
    else
    begin
        if (projectDateKeySearch && (projectDateKeySearch!=19000101)) then
            projectTable = ProjectDataEntity.Instance.DataCollection.Collection(TableView.Combined,(@sProjectCombined)bRec,%string(projectDateKeySearch,"XXXXXXXX"),Q_ALT2)
        else
        begin
            if (consultantKeySearch) then
                projectTable = ProjectDataEntity.Instance.DataCollection.Collection(TableView.Combined,(@sProjectCombined)bRec,consultantKeySearch,Q_ALT3)
            else
                projectTable = ProjectDataEntity.Instance.DataCollection.Collection(TableView.Combined,(@sProjectCombined) bRec)
        end
    end

    freturn true

endfunction

;;; <summary>
;;; update_project
;;; </summary>
;;; <remarks>
;;; pass in the modified record and attempt an update
;;; </remark>
;;; <param name=projectData>passed project record area></param>
;;; <return type="Boolean">true = success, false = error</returns>
function update_project, boolean
    required in  userToken      ,a22
    required in  projectData    ,sProject
    required out newGrfa        ,a22
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;set the data area
    ProjectDataEntity.Instance.IO.DataArea = projectData

    ;;update the record
    result = ProjectDataEntity.Instance.IO.CompareAndSave()
    lastErrorMsg = ProjectDataEntity.Instance.IO.LastErrorMessage

    newGrfa = ProjectDataEntity.Instance.IO.GRFA

    freturn result

endfunction

;;; <summary>
;;; delete_project
;;; </summary>
;;; <remarks>
;;; pass in the record to delete
;;; </remark>
;;; <param name=projectData>passed project record area></param>
;;; <return type="Boolean">true = success, false = error</returns>
function delete_project         ,boolean
    required in  userToken      ,a22
    required in  projectData    ,sProject
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;set the data area
    ProjectDataEntity.Instance.IO.DataArea = projectData

    ;;first delete linked records
    ProjectDataEntity.Instance.IO.DataConsistency(%string(projectData.project_id))

    ;;delete the record
    result = ProjectDataEntity.Instance.IO.FindAndDelete()
    lastErrorMsg = ProjectDataEntity.Instance.IO.LastErrorMessage

    freturn result

endfunction

