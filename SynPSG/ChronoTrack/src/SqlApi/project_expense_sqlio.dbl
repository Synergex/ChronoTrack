;;*****************************************************************************
;;
;; Routine:     project_expense_create
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
;;
;; ChronoTrack is an application written and managed by the Synergex Professional Services Group.
;;
;;***********************************************************************************
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by <CODEGEN_VERSION>.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
;;
;; Possible return values from this routine are:
;;
;;   true   Table created
;;   false  Error (see a_errtxt)
;;
function project_expense_create ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in process
        errtxt      ,a512       ;;Returned error message text
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Create the database table and primary key
    ;;
    if (ok)
    begin
        sql = "CREATE TABLE PROJECT_EXPENSE ("
        & + "PROJECT_ID DECIMAL(8) NOT NULL,"
        & + "EXPENSE_ID DECIMAL(6) NOT NULL,"
        & + "EXPENSE_DATE DATETIME,"
        & + "EXPENSE_TYPE VARCHAR(10) NOT NULL,"
        & + "DESCRIPTION VARCHAR(60),"
        & + "CURRENCY_CODE VARCHAR(2) NOT NULL,"
        & + "UNIT_PRICE DECIMAL(11,2),"
        & + "QUANTITY DECIMAL(6,2),"
        & + "EXPENSED_BY VARCHAR(15) NOT NULL,"
        & + "ENTERED_BY VARCHAR(15) NOT NULL,"
        & + "ENTERED_DATE DATETIME NOT NULL,"
        & + "MODIFIED_BY VARCHAR(15),"
        & + "MODIFIED_DATE DATETIME,"
        & + "IS_ESTIMATE DECIMAL(1),"
        & + "REPLICATION_KEY VARCHAR(20),"
        & + "CONSTRAINT PK_PROJECT_EXPENSE PRIMARY KEY CLUSTERED"
        & + " (PROJECT_ID ASC,EXPENSE_ID ASC))"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 1 (Project expenses by date and user)
    ;;
    if (ok)
    begin
        sql = "CREATE INDEX IX_PROJECT_EXPENSE_PROJECT_EXPENSE_KEY1 "
        &     "ON PROJECT_EXPENSE(PROJECT_ID ASC,EXPENSE_DATE ASC,EXPENSED_BY ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 2 (Project expenses by user and date)
    ;;
    if (ok)
    begin
        sql = "CREATE INDEX IX_PROJECT_EXPENSE_PROJECT_EXPENSE_KEY2 "
        &     "ON PROJECT_EXPENSE(PROJECT_ID ASC,EXPENSED_BY ASC,EXPENSE_DATE ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 3 (SQL Timestamp Key)
    ;;
    if (ok)
    begin
        sql = "CREATE UNIQUE INDEX IX_PROJECT_EXPENSE_REPLICATION_KEY "
        &     "ON PROJECT_EXPENSE(REPLICATION_KEY ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Grant access permissions
    ;;
    if (ok)
    begin
        sql = "GRANT ALL ON PROJECT_EXPENSE TO PUBLIC"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

;------------------------------------------------------------------------------
;;Open a cursor
;;
open_cursor,

    if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    return

;;-----------------------------------------------------------------------------
;;Execute a cursor
;;
execute_cursor,

    if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to execute SQL statement"
    end

    return

;;-----------------------------------------------------------------------------
;;Close a cursor
;;
close_cursor,

    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
        clear cursor
    end

    return

endfunction

;;*****************************************************************************
;;
;; Routine:      project_expense_drop
;;
;; Author:       CodeGen (Steve Ives)
;;
;; Company:      Synergex
;;
;; Created:      04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;   true   Table dropped
;;   false  Error (see a_errtxt)
;;
function project_expense_drop ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in progress
        errtxt      ,a256       ;;Returned error message text
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open cursor for DROP TABLE statement
    ;;
    if (ok)
    begin
        if (%ssc_open(a_dbchn,cursor,"DROP TABLE PROJECT_EXPENSE",SSQL_NONSEL)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Execute DROP TABLE statement
    ;;
    if (ok)
    begin
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_NORMAL) then
            begin
                ;;Check if the error was that the table did not exist
                if (dberror==-3701) then
                    clear errtxt
                else
                    ok = false
            end
            else
            begin
                errtxt="Failed to execute SQL statement"
                ok = false
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine

    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     project_expense_delete_row
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    row deleted
;;  false   Error (see a_errtxt)
;;
function project_expense_delete_row ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    required in  a_repkey   ,a      ;;Replication key
    optional out a_errtxt   ,a      ;;Error text
    endparams

    ;;Note: Primary key segments or a_where must be specified.

    .include "CONNECTDIR:ssql.def"
    .include "PROJECT_EXPENSE" repository, stack record="project_expense"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in progress
        errtxt      ,a256       ;;Error message text
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the DELETE statement
    ;;
    if (ok)
    begin
        sql = "DELETE FROM PROJECT_EXPENSE WHERE REPLICATION_KEY=:1"
        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,,1,a_repkey)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Execute the query
    ;;
    if (ok)
    begin
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     project_expense_exists
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*******************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  -1  An error occurred
;;  0   Table does not exist
;;  1   Table exists
;;
function project_expense_exists ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "PROJECT_EXPENSE" repository, stack record="project_expense"

    stack record local_data
        error       ,int    ;;Returned error number
        dberror     ,int    ;;Database error number
        cursor      ,int    ;;Database cursor
        length      ,int    ;;Length of a string
        table_name  ,a128   ;;Retrieved table name
        errtxt      ,a256   ;;Error message text
    endrecord

proc

    init project_expense,local_data

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the SELECT statement
    ;;
    if (%ssc_open(a_dbchn,cursor,"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES "
    &   "WHERE TABLE_NAME='PROJECT_EXPENSE'",SSQL_SELECT)==SSQL_FAILURE)
    begin
        error=-1
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    ;;-------------------------------------------------------------------------
    ;;Bind host variables to receive the data
    ;;
    if (!error)
    begin
        if (%ssc_define(a_dbchn,cursor,1,table_name)==SSQL_FAILURE)
        begin
            error=-1
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variable"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Move data to host variables
    ;;
    if (!error)
    begin
        if (%ssc_move(a_dbchn,cursor,1)==SSQL_NORMAL)
                error = 1 ;; Table exists
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (!error)
            begin
                error=-1
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (error) then
            a_errtxt=errtxt
        else
            clear a_errtxt
    end

    freturn error

endfunction

;;*****************************************************************************
;;
;; Routine:     project_expense_insert_row
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Row inserted
;;  false   Error (see a_errtxt)
;;
function project_expense_insert_row ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    required in  a_data     ,a      ;;Record containing data to insert
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "PROJECT_EXPENSE" repository, stack record="project_expense"

    external function
        IsNumeric   ,^val
    endexternal

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        cnt         ,int        ;;Generic counter
        transaction ,int        ;;Transaction in progress
        length      ,int        ;;Length of a string
        errtxt      ,a256       ;;Error message text
    endrecord

    static record
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the INSERT statement
    ;;
    if (ok)
    begin
        if (!(a)sql)
        begin
            sql = "INSERT INTO PROJECT_EXPENSE ("
            & + "PROJECT_ID,"
            & + "EXPENSE_ID,"
            & + "EXPENSE_DATE,"
            & + "EXPENSE_TYPE,"
            & + "DESCRIPTION,"
            & + "CURRENCY_CODE,"
            & + "UNIT_PRICE,"
            & + "QUANTITY,"
            & + "EXPENSED_BY,"
            & + "ENTERED_BY,"
            & + "ENTERED_DATE,"
            & + "MODIFIED_BY,"
            & + "MODIFIED_DATE,"
            & + "IS_ESTIMATE,"
            & + "REPLICATION_KEY"
            & + ") VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15)"
        end

        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Bind the host variables for data to be inserted
    ;;
    if (ok)
    begin
        if (%ssc_bind(a_dbchn,cursor,15,
        &    project_expense.project_id,
        &    project_expense.expense_id,
        &    ^a(project_expense.expense_date),
        &    project_expense.expense_type,
        &    project_expense.description,
        &    project_expense.currency_code,
        &    project_expense.unit_price,
        &    project_expense.quantity,
        &    project_expense.expensed_by,
        &    project_expense.entered_by,
        &    ^a(project_expense.entered_date),
        &    project_expense.modified_by,
        &    ^a(project_expense.modified_date),
        &    project_expense.is_estimate,
        &    project_expense.replication_key
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Insert the row into the database
    ;;
    if (ok)
    begin
        ;;Load data into bound record
        project_expense = a_data

        ;;Clean up the data
        if ((!project_expense.project_id)||(!%IsNumeric(^a(project_expense.project_id))))
            clear project_expense.project_id
        if ((!project_expense.expense_id)||(!%IsNumeric(^a(project_expense.expense_id))))
            clear project_expense.expense_id
        if ((!project_expense.expense_date)||(!%IsNumeric(^a(project_expense.expense_date))))
            ^a(project_expense.expense_date(1:1))=%char(0)
        project_expense.expense_type=%atrim(project_expense.expense_type)+%char(0)
        project_expense.description=%atrim(project_expense.description)+%char(0)
        project_expense.currency_code=%atrim(project_expense.currency_code)+%char(0)
        if ((!project_expense.unit_price)||(!%IsNumeric(^a(project_expense.unit_price))))
            clear project_expense.unit_price
        if ((!project_expense.quantity)||(!%IsNumeric(^a(project_expense.quantity))))
            clear project_expense.quantity
        project_expense.expensed_by=%atrim(project_expense.expensed_by)+%char(0)
        project_expense.entered_by=%atrim(project_expense.entered_by)+%char(0)
        if ((!project_expense.entered_date)||(!%IsNumeric(^a(project_expense.entered_date))))
            ^a(project_expense.entered_date(1:1))=%char(0)
        project_expense.modified_by=%atrim(project_expense.modified_by)+%char(0)
        if ((!project_expense.modified_date)||(!%IsNumeric(^a(project_expense.modified_date))))
            ^a(project_expense.modified_date(1:1))=%char(0)
        if ((!project_expense.is_estimate)||(!%IsNumeric(^a(project_expense.is_estimate))))
            clear project_expense.is_estimate
        project_expense.replication_key=%atrim(project_expense.replication_key)+%char(0)

        ;;Execute INSERT statement
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     project_expense_insert_rows
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Rows inserted
;;  false   Error (see a_errtxt)
;;
function project_expense_insert_rows ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    required in  a_data     ,int    ;;Memory handle with records to insert
    optional out a_errtxt   ,a      ;;Error text
    optional out a_exception,int    ;;Handle to return exception records
    optional in  a_terminal ,int    ;;Terminal number channel to log errors on
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "PROJECT_EXPENSE" repository, stack record="project_expense"
    .include "PROJECT_EXPENSE" repository, structure="inpbuf", nofields

    external function
        IsNumeric   ,^val
    endexternal

    .define EXCEPTION_BUFSZ 100

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        rows        ,int        ;;Number of rows to insert
        cursor      ,int        ;;Database cursor
        cnt         ,int        ;;Generic counter
        transaction ,int        ;;Transaction in progress
        length      ,int        ;;Length of a string
        ex_ms       ,int        ;;Size of exception array
        ex_mc       ,int        ;;Items in exception array
        continue    ,int        ;;Continue after an error
        errtxt      ,a512       ;;Error message text
    endrecord

    static record
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    if (^passed(a_exception)&&a_exception)
        clear a_exception

    ;;-------------------------------------------------------------------------
    ;;Figure out how many rows to insert
    ;;
    rows = (%mem_proc(DM_GETSIZE,a_data)/^size(project_expense))

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the INSERT statement
    ;;
    if (ok)
    begin
        if (!(a)sql)
        begin
            sql = "INSERT INTO PROJECT_EXPENSE ("
            & + "PROJECT_ID,"
            & + "EXPENSE_ID,"
            & + "EXPENSE_DATE,"
            & + "EXPENSE_TYPE,"
            & + "DESCRIPTION,"
            & + "CURRENCY_CODE,"
            & + "UNIT_PRICE,"
            & + "QUANTITY,"
            & + "EXPENSED_BY,"
            & + "ENTERED_BY,"
            & + "ENTERED_DATE,"
            & + "MODIFIED_BY,"
            & + "MODIFIED_DATE,"
            & + "IS_ESTIMATE,"
            & + "REPLICATION_KEY"
            & + ") VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15)"
        end

        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = true
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Bind the host variables for data to be inserted
    ;;
    if (ok)
    begin
        if (%ssc_bind(a_dbchn,cursor,15,
        &    project_expense.project_id,
        &    project_expense.expense_id,
        &    ^a(project_expense.expense_date),
        &    project_expense.expense_type,
        &    project_expense.description,
        &    project_expense.currency_code,
        &    project_expense.unit_price,
        &    project_expense.quantity,
        &    project_expense.expensed_by,
        &    project_expense.entered_by,
        &    ^a(project_expense.entered_date),
        &    project_expense.modified_by,
        &    ^a(project_expense.modified_date),
        &    project_expense.is_estimate,
        &    project_expense.replication_key
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Insert the rows into the database
    ;;
    if (ok)
    begin
        for cnt from 1 thru rows
        begin
            ;;Load data into bound record
            project_expense = ^m(inpbuf[cnt],a_data)

            ;;Clean up the data
            if ((!project_expense.project_id)||(!%IsNumeric(^a(project_expense.project_id))))
                clear project_expense.project_id
            if ((!project_expense.expense_id)||(!%IsNumeric(^a(project_expense.expense_id))))
                clear project_expense.expense_id
            if ((!project_expense.expense_date)||(!%IsNumeric(^a(project_expense.expense_date))))
                ^a(project_expense.expense_date(1:1))=%char(0)
            project_expense.expense_type=%atrim(project_expense.expense_type)+%char(0)
            project_expense.description=%atrim(project_expense.description)+%char(0)
            project_expense.currency_code=%atrim(project_expense.currency_code)+%char(0)
            if ((!project_expense.unit_price)||(!%IsNumeric(^a(project_expense.unit_price))))
                clear project_expense.unit_price
            if ((!project_expense.quantity)||(!%IsNumeric(^a(project_expense.quantity))))
                clear project_expense.quantity
            project_expense.expensed_by=%atrim(project_expense.expensed_by)+%char(0)
            project_expense.entered_by=%atrim(project_expense.entered_by)+%char(0)
            if ((!project_expense.entered_date)||(!%IsNumeric(^a(project_expense.entered_date))))
                ^a(project_expense.entered_date(1:1))=%char(0)
            project_expense.modified_by=%atrim(project_expense.modified_by)+%char(0)
            if ((!project_expense.modified_date)||(!%IsNumeric(^a(project_expense.modified_date))))
                ^a(project_expense.modified_date(1:1))=%char(0)
            if ((!project_expense.is_estimate)||(!%IsNumeric(^a(project_expense.is_estimate))))
                clear project_expense.is_estimate
            project_expense.replication_key=%atrim(project_expense.replication_key)+%char(0)

            ;;Execute the statement
            if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
            begin
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to execute SQL statement"

                clear continue

                ;;Are we logging errors?
                if (^passed(a_terminal)&&(a_terminal))
                begin
                    writes(a_terminal,errtxt(1:length))
                    continue=1
                end

                ;;Are we processing exceptions?
                if (^passed(a_exception))
                begin
                    if (ex_mc==ex_ms)
                    begin
                        if (!a_exception) then
                            a_exception = %mem_proc(DM_ALLOC|DM_STATIC,^size(inpbuf)*(ex_ms=EXCEPTION_BUFSZ))
                        else
                            a_exception = %mem_proc(DM_RESIZ,^size(inpbuf)*(ex_ms+=EXCEPTION_BUFSZ),a_exception)
                    end
                    ^m(inpbuf[ex_mc+=1],a_exception)=project_expense
                    continue=1
                end

                if (continue) then
                    nextloop
                else
                begin
                    ok = false
                    exitloop
                end
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If we're returning exceptions then resize the buffer to the correct size
    ;;
    if (^passed(a_exception)&&a_exception)
        a_exception = %mem_proc(DM_RESIZ,^size(inpbuf)*ex_mc,a_exception)

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=%atrim(errtxt)+" [Database error "+%string(dberror)+"]"
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     project_expense_load
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Table loaded
;;  false   Error (see a_errtxt)
;;
function project_expense_load ,^val

    required in  a_dbchn    ,int        ;;Connected database channel
    optional out a_errtxt   ,a          ;;Error text
    optional in  a_logex    , boolean   ;;Log exception records
    optional in  a_terminal ,int        ;;Terminal channel to log errors on
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "PROJECT_EXPENSE" repository, structure="project_expense"
    .include "PROJECT_EXPENSE" repository, stack record="tmprec"

    .define BUFFER_ROWS 1000
    .define EXCEPTION_BUFSZ 100

    stack record local_data
        ok      ,boolean    ;;Return status
        filechn ,int        ;;Data file channel
        mh      ,int        ;;Memory handle containing data to insert
        ms      ,int        ;;Size of memory buffer in rows
        mc      ,int        ;;Memory buffer rows currently used
        ex_mh   ,int        ;;Memory buffer for exception records
        ex_mc   ,int        ;;Number of records in returned exception array
        ex_ch   ,int        ;;Exception log file channel
        cnt     ,int        ;;Loop counter
        errtxt  ,a256       ;;Error message text
    endrecord

proc

    init local_data
    ok = true

    ;;Open the data file associated with the structure
    begin
        open(filechn=%syn_freechn,i:i,"DAT:expense.ism") [ERR=fnf]
        exit
fnf,    ok = false
        errtxt = "Failed to open file DAT:expense.ism"
        clear filechn
    end

    if (ok)
    begin

        ;;Allocate memory buffer for the database rows
        mh = %mem_proc(DM_ALLOC,^size(project_expense)*(ms=BUFFER_ROWS))

        ;;Read records from the input file
        repeat
        begin

            ;;Get the next record from the input file
            reads(filechn,tmprec,eof)

            ;;Got one, load it into or buffer
            ^m(project_expense[mc+=1],mh) = tmprec

            ;;If the buffer is full, write it to the database
            if (mc==ms)
                call insert_data

            if (!ok)
                exitloop

        end

eof,    ;;Any data waiting to be written?
        if (mc)
        begin
            mh = %mem_proc(DM_RESIZ,^size(project_expense)*mc,mh)
            call insert_data
        end

        ;;Deallocate memory buffer
        mh = %mem_proc(DM_FREE,mh)

    end

    ;;Close the file
    if (filechn)
        close filechn

    ;;Close the exceptions log file
    if (ex_ch)
        close ex_ch

    ;;Return the error text
    if (^passed(a_errtxt))
        a_errtxt = errtxt

    freturn ok

insert_data,

    if (%project_expense_insert_rows(a_dbchn,mh,errtxt,ex_mh,a_terminal))
    begin
        ;;Any exceptions?
        if (ex_mh)
        begin
            ;;Are we logging exceptions?
            if (^passed(a_logex)&&a_logex) then
            begin
                ;;Open the log file
                if (!ex_ch)
                    open(ex_ch=%syn_freechn,o:s,"exceptions_project_expense.log")
                ;;How many exceptions to log?
                ex_mc = (%mem_proc(DM_GETSIZE,ex_mh)/^size(project_expense))
                ;;Log the exceptions
                for cnt from 1 thru ex_mc
                    writes(ex_ch,^m(project_expense[cnt],ex_mh))
                if (^passed(a_terminal)&&a_terminal)
                    writes(a_terminal,"Exceptions were logged to exceptions_project_expense.log")
            end
            else
            begin
                ;;No, report and error
                ok = false
            end
            ;;Release the exception buffer
            ex_mh=%mem_proc(DM_FREE,ex_mh)
        end
    end

    clear mc

    return

endfunction

;;*****************************************************************************
;;
;; Routine:     project_expense_update_row
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Success, row was updated
;;  false   Error, see a_errtxt for details
;;
function project_expense_update_row ,^val

    required in  a_dbchn    ,int    ;Connected database channel
    required in  a_data     ,a      ;Record containing data to insert
    optional out a_rows     ,int    ;Number of rows affected
    optional out a_errtxt   ,a      ;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "PROJECT_EXPENSE" repository, stack record="project_expense"

    stack record local_data
        ok          ,boolean    ;;OK to continue
        transaction ,boolean    ;;Transaction in progress
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        rows        ,int        ;;Number of rows updated
        errtxt      ,a256       ;;Error message text
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    if (^passed(a_rows))
        clear a_rows

    ;;-------------------------------------------------------------------------
    ;;Load the data into the bound record
    ;;
    project_expense=a_data

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction = true
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the UPDATE statement
    ;;
    if (ok)
    begin
        sql = "UPDATE PROJECT_EXPENSE SET "
        & + "PROJECT_ID=:1,"
        & + "EXPENSE_ID=:2,"
        & + "EXPENSE_DATE=:3,"
        & + "EXPENSE_TYPE=:4,"
        & + "DESCRIPTION=:5,"
        & + "CURRENCY_CODE=:6,"
        & + "UNIT_PRICE=:7,"
        & + "QUANTITY=:8,"
        & + "EXPENSED_BY=:9,"
        & + "ENTERED_BY=:10,"
        & + "ENTERED_DATE=:11,"
        & + "MODIFIED_BY=:12,"
        & + "MODIFIED_DATE=:13,"
        & + "IS_ESTIMATE=:14,"
        & + "REPLICATION_KEY=:15"
        & + " WHERE"
        & + " PROJECT_ID='" + %atrim(^a(project_expense.project_id)) + "' AND"
        & + " EXPENSE_ID='" + %atrim(^a(project_expense.expense_id)) + "'"

        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Bind the host variables for the data to update
    ;;
    if (ok)
    begin
        if (%ssc_bind(a_dbchn,cursor,15,
        &    project_expense.project_id,
        &    project_expense.expense_id,
        &    ^a(project_expense.expense_date),
        &    project_expense.expense_type,
        &    project_expense.description,
        &    project_expense.currency_code,
        &    project_expense.unit_price,
        &    project_expense.quantity,
        &    project_expense.expensed_by,
        &    project_expense.entered_by,
        &    ^a(project_expense.entered_date),
        &    project_expense.modified_by,
        &    ^a(project_expense.modified_date),
        &    project_expense.is_estimate,
        &    project_expense.replication_key
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Update the row in the database
    ;;
    if (ok)
    begin
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD,,rows)==SSQL_NORMAL) then
        begin
            if (^passed(a_rows))
                a_rows = rows
        end
        else
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Return error message
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

