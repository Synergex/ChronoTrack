//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ODBCdashboard {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjHours")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjHours : global::System.Data.DataSet {
        
        private PROJHOURSDataTable tablePROJHOURS;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjHours() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjHours(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PROJHOURS"] != null)) {
                    base.Tables.Add(new PROJHOURSDataTable(ds.Tables["PROJHOURS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROJHOURSDataTable PROJHOURS {
            get {
                return this.tablePROJHOURS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjHours cln = ((ProjHours)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PROJHOURS"] != null)) {
                    base.Tables.Add(new PROJHOURSDataTable(ds.Tables["PROJHOURS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePROJHOURS = ((PROJHOURSDataTable)(base.Tables["PROJHOURS"]));
            if ((initTable == true)) {
                if ((this.tablePROJHOURS != null)) {
                    this.tablePROJHOURS.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjHours";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjHours.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePROJHOURS = new PROJHOURSDataTable();
            base.Tables.Add(this.tablePROJHOURS);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROJHOURS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjHours ds = new ProjHours();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PROJHOURSRowChangeEventHandler(object sender, PROJHOURSRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROJHOURSDataTable : global::System.Data.TypedTableBase<PROJHOURSRow> {
            
            private global::System.Data.DataColumn columnCOMPANY;
            
            private global::System.Data.DataColumn columnPROJECT_ID;
            
            private global::System.Data.DataColumn columnCUSTOMER_ID;
            
            private global::System.Data.DataColumn columnCONTRACT_ID;
            
            private global::System.Data.DataColumn columnCONTRACT_PROJECT_ID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnPROJECTSTARTDATE;
            
            private global::System.Data.DataColumn columnPROJECTENDDATE;
            
            private global::System.Data.DataColumn columnCURRENT_STATUS;
            
            private global::System.Data.DataColumn columnLEAD_CONSULTANT;
            
            private global::System.Data.DataColumn columnWORK_LOCATION_ID;
            
            private global::System.Data.DataColumn columnTEXT;
            
            private global::System.Data.DataColumn columnTASK_ID;
            
            private global::System.Data.DataColumn columnTASK_TYPE;
            
            private global::System.Data.DataColumn columnTASKDESC;
            
            private global::System.Data.DataColumn columnASSIGNED_TO;
            
            private global::System.Data.DataColumn columnSTART_DATE;
            
            private global::System.Data.DataColumn columnSTART_TIME;
            
            private global::System.Data.DataColumn columnEND_DATE;
            
            private global::System.Data.DataColumn columnEND_TIME;
            
            private global::System.Data.DataColumn columnBILLABLE_HOURS;
            
            private global::System.Data.DataColumn columnTASKLOCATION;
            
            private global::System.Data.DataColumn columnTASK_TYPE_ID;
            
            private global::System.Data.DataColumn columnTASKTYPEDESC;
            
            private global::System.Data.DataColumn columnTASKLOCDESC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJHOURSDataTable() {
                this.TableName = "PROJHOURS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJHOURSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROJHOURSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANYColumn {
                get {
                    return this.columnCOMPANY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROJECT_IDColumn {
                get {
                    return this.columnPROJECT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSTOMER_IDColumn {
                get {
                    return this.columnCUSTOMER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTRACT_IDColumn {
                get {
                    return this.columnCONTRACT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTRACT_PROJECT_IDColumn {
                get {
                    return this.columnCONTRACT_PROJECT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROJECTSTARTDATEColumn {
                get {
                    return this.columnPROJECTSTARTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROJECTENDDATEColumn {
                get {
                    return this.columnPROJECTENDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CURRENT_STATUSColumn {
                get {
                    return this.columnCURRENT_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LEAD_CONSULTANTColumn {
                get {
                    return this.columnLEAD_CONSULTANT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WORK_LOCATION_IDColumn {
                get {
                    return this.columnWORK_LOCATION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TEXTColumn {
                get {
                    return this.columnTEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASK_IDColumn {
                get {
                    return this.columnTASK_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASK_TYPEColumn {
                get {
                    return this.columnTASK_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKDESCColumn {
                get {
                    return this.columnTASKDESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ASSIGNED_TOColumn {
                get {
                    return this.columnASSIGNED_TO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn START_DATEColumn {
                get {
                    return this.columnSTART_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn START_TIMEColumn {
                get {
                    return this.columnSTART_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn END_DATEColumn {
                get {
                    return this.columnEND_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn END_TIMEColumn {
                get {
                    return this.columnEND_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILLABLE_HOURSColumn {
                get {
                    return this.columnBILLABLE_HOURS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKLOCATIONColumn {
                get {
                    return this.columnTASKLOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASK_TYPE_IDColumn {
                get {
                    return this.columnTASK_TYPE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKTYPEDESCColumn {
                get {
                    return this.columnTASKTYPEDESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKLOCDESCColumn {
                get {
                    return this.columnTASKLOCDESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJHOURSRow this[int index] {
                get {
                    return ((PROJHOURSRow)(this.Rows[index]));
                }
            }
            
            public event PROJHOURSRowChangeEventHandler PROJHOURSRowChanging;
            
            public event PROJHOURSRowChangeEventHandler PROJHOURSRowChanged;
            
            public event PROJHOURSRowChangeEventHandler PROJHOURSRowDeleting;
            
            public event PROJHOURSRowChangeEventHandler PROJHOURSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROJHOURSRow(PROJHOURSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJHOURSRow AddPROJHOURSRow(
                        string COMPANY, 
                        int PROJECT_ID, 
                        string CUSTOMER_ID, 
                        string CONTRACT_ID, 
                        short CONTRACT_PROJECT_ID, 
                        string DESCRIPTION, 
                        System.DateTime PROJECTSTARTDATE, 
                        System.DateTime PROJECTENDDATE, 
                        short CURRENT_STATUS, 
                        string LEAD_CONSULTANT, 
                        short WORK_LOCATION_ID, 
                        string TEXT, 
                        short TASK_ID, 
                        short TASK_TYPE, 
                        string TASKDESC, 
                        string ASSIGNED_TO, 
                        System.DateTime START_DATE, 
                        System.TimeSpan START_TIME, 
                        System.DateTime END_DATE, 
                        System.TimeSpan END_TIME, 
                        decimal BILLABLE_HOURS, 
                        short TASKLOCATION, 
                        short TASK_TYPE_ID, 
                        string TASKTYPEDESC, 
                        string TASKLOCDESC) {
                PROJHOURSRow rowPROJHOURSRow = ((PROJHOURSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        COMPANY,
                        PROJECT_ID,
                        CUSTOMER_ID,
                        CONTRACT_ID,
                        CONTRACT_PROJECT_ID,
                        DESCRIPTION,
                        PROJECTSTARTDATE,
                        PROJECTENDDATE,
                        CURRENT_STATUS,
                        LEAD_CONSULTANT,
                        WORK_LOCATION_ID,
                        TEXT,
                        TASK_ID,
                        TASK_TYPE,
                        TASKDESC,
                        ASSIGNED_TO,
                        START_DATE,
                        START_TIME,
                        END_DATE,
                        END_TIME,
                        BILLABLE_HOURS,
                        TASKLOCATION,
                        TASK_TYPE_ID,
                        TASKTYPEDESC,
                        TASKLOCDESC};
                rowPROJHOURSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPROJHOURSRow);
                return rowPROJHOURSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PROJHOURSDataTable cln = ((PROJHOURSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PROJHOURSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOMPANY = base.Columns["COMPANY"];
                this.columnPROJECT_ID = base.Columns["PROJECT_ID"];
                this.columnCUSTOMER_ID = base.Columns["CUSTOMER_ID"];
                this.columnCONTRACT_ID = base.Columns["CONTRACT_ID"];
                this.columnCONTRACT_PROJECT_ID = base.Columns["CONTRACT_PROJECT_ID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnPROJECTSTARTDATE = base.Columns["PROJECTSTARTDATE"];
                this.columnPROJECTENDDATE = base.Columns["PROJECTENDDATE"];
                this.columnCURRENT_STATUS = base.Columns["CURRENT_STATUS"];
                this.columnLEAD_CONSULTANT = base.Columns["LEAD_CONSULTANT"];
                this.columnWORK_LOCATION_ID = base.Columns["WORK_LOCATION_ID"];
                this.columnTEXT = base.Columns["TEXT"];
                this.columnTASK_ID = base.Columns["TASK_ID"];
                this.columnTASK_TYPE = base.Columns["TASK_TYPE"];
                this.columnTASKDESC = base.Columns["TASKDESC"];
                this.columnASSIGNED_TO = base.Columns["ASSIGNED_TO"];
                this.columnSTART_DATE = base.Columns["START_DATE"];
                this.columnSTART_TIME = base.Columns["START_TIME"];
                this.columnEND_DATE = base.Columns["END_DATE"];
                this.columnEND_TIME = base.Columns["END_TIME"];
                this.columnBILLABLE_HOURS = base.Columns["BILLABLE_HOURS"];
                this.columnTASKLOCATION = base.Columns["TASKLOCATION"];
                this.columnTASK_TYPE_ID = base.Columns["TASK_TYPE_ID"];
                this.columnTASKTYPEDESC = base.Columns["TASKTYPEDESC"];
                this.columnTASKLOCDESC = base.Columns["TASKLOCDESC"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOMPANY = new global::System.Data.DataColumn("COMPANY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY);
                this.columnPROJECT_ID = new global::System.Data.DataColumn("PROJECT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROJECT_ID);
                this.columnCUSTOMER_ID = new global::System.Data.DataColumn("CUSTOMER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMER_ID);
                this.columnCONTRACT_ID = new global::System.Data.DataColumn("CONTRACT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACT_ID);
                this.columnCONTRACT_PROJECT_ID = new global::System.Data.DataColumn("CONTRACT_PROJECT_ID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACT_PROJECT_ID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnPROJECTSTARTDATE = new global::System.Data.DataColumn("PROJECTSTARTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROJECTSTARTDATE);
                this.columnPROJECTENDDATE = new global::System.Data.DataColumn("PROJECTENDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROJECTENDDATE);
                this.columnCURRENT_STATUS = new global::System.Data.DataColumn("CURRENT_STATUS", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCURRENT_STATUS);
                this.columnLEAD_CONSULTANT = new global::System.Data.DataColumn("LEAD_CONSULTANT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLEAD_CONSULTANT);
                this.columnWORK_LOCATION_ID = new global::System.Data.DataColumn("WORK_LOCATION_ID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWORK_LOCATION_ID);
                this.columnTEXT = new global::System.Data.DataColumn("TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEXT);
                this.columnTASK_ID = new global::System.Data.DataColumn("TASK_ID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASK_ID);
                this.columnTASK_TYPE = new global::System.Data.DataColumn("TASK_TYPE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASK_TYPE);
                this.columnTASKDESC = new global::System.Data.DataColumn("TASKDESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKDESC);
                this.columnASSIGNED_TO = new global::System.Data.DataColumn("ASSIGNED_TO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnASSIGNED_TO);
                this.columnSTART_DATE = new global::System.Data.DataColumn("START_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTART_DATE);
                this.columnSTART_TIME = new global::System.Data.DataColumn("START_TIME", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTART_TIME);
                this.columnEND_DATE = new global::System.Data.DataColumn("END_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_DATE);
                this.columnEND_TIME = new global::System.Data.DataColumn("END_TIME", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_TIME);
                this.columnBILLABLE_HOURS = new global::System.Data.DataColumn("BILLABLE_HOURS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILLABLE_HOURS);
                this.columnTASKLOCATION = new global::System.Data.DataColumn("TASKLOCATION", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKLOCATION);
                this.columnTASK_TYPE_ID = new global::System.Data.DataColumn("TASK_TYPE_ID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASK_TYPE_ID);
                this.columnTASKTYPEDESC = new global::System.Data.DataColumn("TASKTYPEDESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKTYPEDESC);
                this.columnTASKLOCDESC = new global::System.Data.DataColumn("TASKLOCDESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKLOCDESC);
                this.columnCOMPANY.MaxLength = 40;
                this.columnPROJECT_ID.AllowDBNull = false;
                this.columnCUSTOMER_ID.MaxLength = 10;
                this.columnCONTRACT_ID.MaxLength = 10;
                this.columnDESCRIPTION.MaxLength = 60;
                this.columnLEAD_CONSULTANT.MaxLength = 15;
                this.columnTEXT.MaxLength = 700;
                this.columnTASK_ID.AllowDBNull = false;
                this.columnTASKDESC.MaxLength = 60;
                this.columnASSIGNED_TO.MaxLength = 15;
                this.columnTASK_TYPE_ID.AllowDBNull = false;
                this.columnTASKTYPEDESC.MaxLength = 35;
                this.columnTASKLOCDESC.MaxLength = 60;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJHOURSRow NewPROJHOURSRow() {
                return ((PROJHOURSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PROJHOURSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PROJHOURSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROJHOURSRowChanged != null)) {
                    this.PROJHOURSRowChanged(this, new PROJHOURSRowChangeEvent(((PROJHOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROJHOURSRowChanging != null)) {
                    this.PROJHOURSRowChanging(this, new PROJHOURSRowChangeEvent(((PROJHOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROJHOURSRowDeleted != null)) {
                    this.PROJHOURSRowDeleted(this, new PROJHOURSRowChangeEvent(((PROJHOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROJHOURSRowDeleting != null)) {
                    this.PROJHOURSRowDeleting(this, new PROJHOURSRowChangeEvent(((PROJHOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROJHOURSRow(PROJHOURSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjHours ds = new ProjHours();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROJHOURSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROJHOURSRow : global::System.Data.DataRow {
            
            private PROJHOURSDataTable tablePROJHOURS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJHOURSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROJHOURS = ((PROJHOURSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANY {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.COMPANYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.COMPANYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PROJECT_ID {
                get {
                    return ((int)(this[this.tablePROJHOURS.PROJECT_IDColumn]));
                }
                set {
                    this[this.tablePROJHOURS.PROJECT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMER_ID {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.CUSTOMER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTOMER_ID\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.CUSTOMER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTRACT_ID {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.CONTRACT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTRACT_ID\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.CONTRACT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CONTRACT_PROJECT_ID {
                get {
                    try {
                        return ((short)(this[this.tablePROJHOURS.CONTRACT_PROJECT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTRACT_PROJECT_ID\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.CONTRACT_PROJECT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PROJECTSTARTDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePROJHOURS.PROJECTSTARTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROJECTSTARTDATE\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.PROJECTSTARTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PROJECTENDDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePROJHOURS.PROJECTENDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROJECTENDDATE\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.PROJECTENDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CURRENT_STATUS {
                get {
                    try {
                        return ((short)(this[this.tablePROJHOURS.CURRENT_STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CURRENT_STATUS\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.CURRENT_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LEAD_CONSULTANT {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.LEAD_CONSULTANTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LEAD_CONSULTANT\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.LEAD_CONSULTANTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short WORK_LOCATION_ID {
                get {
                    try {
                        return ((short)(this[this.tablePROJHOURS.WORK_LOCATION_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WORK_LOCATION_ID\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.WORK_LOCATION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEXT {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEXT\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TASK_ID {
                get {
                    return ((short)(this[this.tablePROJHOURS.TASK_IDColumn]));
                }
                set {
                    this[this.tablePROJHOURS.TASK_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TASK_TYPE {
                get {
                    try {
                        return ((short)(this[this.tablePROJHOURS.TASK_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASK_TYPE\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.TASK_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TASKDESC {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.TASKDESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASKDESC\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.TASKDESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ASSIGNED_TO {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.ASSIGNED_TOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ASSIGNED_TO\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.ASSIGNED_TOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime START_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePROJHOURS.START_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'START_DATE\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.START_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan START_TIME {
                get {
                    try {
                        return ((global::System.TimeSpan)(this[this.tablePROJHOURS.START_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'START_TIME\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.START_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime END_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePROJHOURS.END_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'END_DATE\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.END_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan END_TIME {
                get {
                    try {
                        return ((global::System.TimeSpan)(this[this.tablePROJHOURS.END_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'END_TIME\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.END_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BILLABLE_HOURS {
                get {
                    try {
                        return ((decimal)(this[this.tablePROJHOURS.BILLABLE_HOURSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILLABLE_HOURS\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.BILLABLE_HOURSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TASKLOCATION {
                get {
                    try {
                        return ((short)(this[this.tablePROJHOURS.TASKLOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASKLOCATION\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.TASKLOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TASK_TYPE_ID {
                get {
                    return ((short)(this[this.tablePROJHOURS.TASK_TYPE_IDColumn]));
                }
                set {
                    this[this.tablePROJHOURS.TASK_TYPE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TASKTYPEDESC {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.TASKTYPEDESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASKTYPEDESC\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.TASKTYPEDESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TASKLOCDESC {
                get {
                    try {
                        return ((string)(this[this.tablePROJHOURS.TASKLOCDESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASKLOCDESC\' in table \'PROJHOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJHOURS.TASKLOCDESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANYNull() {
                return this.IsNull(this.tablePROJHOURS.COMPANYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANYNull() {
                this[this.tablePROJHOURS.COMPANYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMER_IDNull() {
                return this.IsNull(this.tablePROJHOURS.CUSTOMER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMER_IDNull() {
                this[this.tablePROJHOURS.CUSTOMER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACT_IDNull() {
                return this.IsNull(this.tablePROJHOURS.CONTRACT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACT_IDNull() {
                this[this.tablePROJHOURS.CONTRACT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACT_PROJECT_IDNull() {
                return this.IsNull(this.tablePROJHOURS.CONTRACT_PROJECT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACT_PROJECT_IDNull() {
                this[this.tablePROJHOURS.CONTRACT_PROJECT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tablePROJHOURS.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tablePROJHOURS.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROJECTSTARTDATENull() {
                return this.IsNull(this.tablePROJHOURS.PROJECTSTARTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROJECTSTARTDATENull() {
                this[this.tablePROJHOURS.PROJECTSTARTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROJECTENDDATENull() {
                return this.IsNull(this.tablePROJHOURS.PROJECTENDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROJECTENDDATENull() {
                this[this.tablePROJHOURS.PROJECTENDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCURRENT_STATUSNull() {
                return this.IsNull(this.tablePROJHOURS.CURRENT_STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCURRENT_STATUSNull() {
                this[this.tablePROJHOURS.CURRENT_STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLEAD_CONSULTANTNull() {
                return this.IsNull(this.tablePROJHOURS.LEAD_CONSULTANTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLEAD_CONSULTANTNull() {
                this[this.tablePROJHOURS.LEAD_CONSULTANTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWORK_LOCATION_IDNull() {
                return this.IsNull(this.tablePROJHOURS.WORK_LOCATION_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWORK_LOCATION_IDNull() {
                this[this.tablePROJHOURS.WORK_LOCATION_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEXTNull() {
                return this.IsNull(this.tablePROJHOURS.TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEXTNull() {
                this[this.tablePROJHOURS.TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTASK_TYPENull() {
                return this.IsNull(this.tablePROJHOURS.TASK_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTASK_TYPENull() {
                this[this.tablePROJHOURS.TASK_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTASKDESCNull() {
                return this.IsNull(this.tablePROJHOURS.TASKDESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTASKDESCNull() {
                this[this.tablePROJHOURS.TASKDESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsASSIGNED_TONull() {
                return this.IsNull(this.tablePROJHOURS.ASSIGNED_TOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetASSIGNED_TONull() {
                this[this.tablePROJHOURS.ASSIGNED_TOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTART_DATENull() {
                return this.IsNull(this.tablePROJHOURS.START_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTART_DATENull() {
                this[this.tablePROJHOURS.START_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTART_TIMENull() {
                return this.IsNull(this.tablePROJHOURS.START_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTART_TIMENull() {
                this[this.tablePROJHOURS.START_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_DATENull() {
                return this.IsNull(this.tablePROJHOURS.END_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_DATENull() {
                this[this.tablePROJHOURS.END_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_TIMENull() {
                return this.IsNull(this.tablePROJHOURS.END_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_TIMENull() {
                this[this.tablePROJHOURS.END_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILLABLE_HOURSNull() {
                return this.IsNull(this.tablePROJHOURS.BILLABLE_HOURSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILLABLE_HOURSNull() {
                this[this.tablePROJHOURS.BILLABLE_HOURSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTASKLOCATIONNull() {
                return this.IsNull(this.tablePROJHOURS.TASKLOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTASKLOCATIONNull() {
                this[this.tablePROJHOURS.TASKLOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTASKTYPEDESCNull() {
                return this.IsNull(this.tablePROJHOURS.TASKTYPEDESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTASKTYPEDESCNull() {
                this[this.tablePROJHOURS.TASKTYPEDESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTASKLOCDESCNull() {
                return this.IsNull(this.tablePROJHOURS.TASKLOCDESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTASKLOCDESCNull() {
                this[this.tablePROJHOURS.TASKLOCDESCColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROJHOURSRowChangeEvent : global::System.EventArgs {
            
            private PROJHOURSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJHOURSRowChangeEvent(PROJHOURSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJHOURSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ODBCdashboard.ProjHoursTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PROJHOURSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private global::System.Data.Odbc.OdbcConnection _connection;
        
        private global::System.Data.Odbc.OdbcTransaction _transaction;
        
        private global::System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PROJHOURSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.Odbc.OdbcDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PROJHOURS";
            tableMapping.ColumnMappings.Add("COMPANY", "COMPANY");
            tableMapping.ColumnMappings.Add("PROJECT_ID", "PROJECT_ID");
            tableMapping.ColumnMappings.Add("CUSTOMER_ID", "CUSTOMER_ID");
            tableMapping.ColumnMappings.Add("CONTRACT_ID", "CONTRACT_ID");
            tableMapping.ColumnMappings.Add("CONTRACT_PROJECT_ID", "CONTRACT_PROJECT_ID");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            tableMapping.ColumnMappings.Add("PROJECTSTARTDATE", "PROJECTSTARTDATE");
            tableMapping.ColumnMappings.Add("PROJECTENDDATE", "PROJECTENDDATE");
            tableMapping.ColumnMappings.Add("CURRENT_STATUS", "CURRENT_STATUS");
            tableMapping.ColumnMappings.Add("LEAD_CONSULTANT", "LEAD_CONSULTANT");
            tableMapping.ColumnMappings.Add("WORK_LOCATION_ID", "WORK_LOCATION_ID");
            tableMapping.ColumnMappings.Add("TEXT", "TEXT");
            tableMapping.ColumnMappings.Add("TASK_ID", "TASK_ID");
            tableMapping.ColumnMappings.Add("TASK_TYPE", "TASK_TYPE");
            tableMapping.ColumnMappings.Add("TASKDESC", "TASKDESC");
            tableMapping.ColumnMappings.Add("ASSIGNED_TO", "ASSIGNED_TO");
            tableMapping.ColumnMappings.Add("START_DATE", "START_DATE");
            tableMapping.ColumnMappings.Add("START_TIME", "START_TIME");
            tableMapping.ColumnMappings.Add("END_DATE", "END_DATE");
            tableMapping.ColumnMappings.Add("END_TIME", "END_TIME");
            tableMapping.ColumnMappings.Add("BILLABLE_HOURS", "BILLABLE_HOURS");
            tableMapping.ColumnMappings.Add("TASKLOCATION", "TASKLOCATION");
            tableMapping.ColumnMappings.Add("TASK_TYPE_ID", "TASK_TYPE_ID");
            tableMapping.ColumnMappings.Add("TASKTYPEDESC", "TASKTYPEDESC");
            tableMapping.ColumnMappings.Add("TASKLOCDESC", "TASKLOCDESC");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::ODBCdashboard.Properties.Settings.Default.ChronoTrackODBC;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ""COMPANY"", ""PROJECT_ID"", ""CUSTOMER_ID"", ""CONTRACT_ID"", ""CONTRACT_PROJECT_ID"", ""DESCRIPTION"", ""PROJECTSTARTDATE"", ""PROJECTENDDATE"", ""CURRENT_STATUS"", ""LEAD_CONSULTANT"", ""WORK_LOCATION_ID"", ""TEXT"", ""TASK_ID"", ""TASK_TYPE"", ""TASKDESC"", ""ASSIGNED_TO"", ""START_DATE"", ""START_TIME"", ""END_DATE"", ""END_TIME"", ""BILLABLE_HOURS"", ""TASKLOCATION"", ""TASK_TYPE_ID"", ""TASKTYPEDESC"", ""TASKLOCDESC"" FROM ""DBA"".""PROJHOURS""";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjHours.PROJHOURSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjHours.PROJHOURSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjHours.PROJHOURSDataTable dataTable = new ProjHours.PROJHOURSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ProjHours dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ProjHours dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ProjHours dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ProjHours dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591