;;**********************************************************************
;;
;; Title:       UserMaintenance.dbl
;;
;; Type:        Application
;;
;; Description: Maintenance program allowing user maintenance
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
;;
;; ChronoTrack is an application written and managed by the Synergex Professional Services Group.
;;
;;***********************************************************************************

.include "DEF:ChronoTrack.def"

subroutine UserMaintenance
    in      req wm          ,@WindowManager
    inout   req countryObj  ,@CountryDataEntity
    inout   req stateObj    ,@StateDataEntity
    endparams

.include "WND:tools.def"
.include "DEF:ChronoTrackMacros.def"

.if ^variant .eq. 4     ;;for ALL build force this to Synergy Toolkit
.ifdef UINameSpace
.undefine UINameSpace
.endc
.define TOOLKIT_VERSION
.endc;^variant .eq. 4

.include 'user' repository, record = "userRec" ,end

literal
    winTitle    ,a* ,"User maintenance"
endliteral

record
.ifdef UINameSpace
    frmUserMaint   ,UIClassMacro(UserMaintenance)
.endc
    user            ,@UserDataEntity
    winID           ,int
    result          ,boolean
    edit_mode       ,int
    set_name        ,a15
endrecord

proc

.ifdef UINameSpace
    countryObj.DataTable.PerformReloadTable=true
    stateObj.DataTable.PerformReloadTable=true
.endc

    wm.Environment(true, "Loading " + winTitle + " objects....")
    wm.DisableMenu("mnuMaint")
    wm.DisableMenu("mnuPrj")

    try
    begin

        ;;create data entity
        user = new UserDataEntity(false, TableView.Full)

        ;;load the window
.ifdef UINameSpace
        frmUserMaint = new UINameSpace.UserMaintenance(wm.SynInteropInstance)

        ;;assign data bindings
        frmUserMaint.SetDataSource(user.ResultsTable(TableView.Full), countryObj.ResultsTable(), stateObj.ResultsTable())

        winID = wm.tkWindow(frmUserMaint, 0, 0, winTitle, true)
        frmUserMaint.Size = wm.FormResize
.else
        i_ldinp(winID,, "usermnt",,, result)
        if (result) throw new Exception("Unable to load user maitenance input window")
.endc

        TransactionViewer.ClearView()

        wm.PlaceForm(winID)

        ;;process key set
        set_name = "KEY"
        edit_mode = 1

        repeat
        begin
.ifdef UINameSpace
            frmUserMaint.SetFocus()
            wm.processForm(winID)
.else
            ;;toolkit input processing loop
            i_input(winID, set_name, userRec = user.IO.DataArea,,,,D_NOTERM)

            ;;is input complete
            if (!g_select)
            begin
                m_signal("MB_COMMIT")
            end

            ;;need to update the user class data
            user.IO.DataArea = userRec
.endc
            using g_entnam select
            ("MB_CANCEL"),
            begin
                exitloop
            end
            ("MB_COMMIT"),
            begin
                ;;commit data if required
.ifdef UINameSpace
                user.DataTable.Commit()
                exitloop
.else
                using set_name select
                ("KEY"),
                begin
                    ;;try to load the selected user
                    if user.IO.Locate(userRec.user_ID, Q_PRIMARY, false) then
                    begin
                        edit_mode = D_EDIT_MODE_MODIFY
                        userRec = user.IO.DataArea
                        i_display(winID, "all", userRec)
                    end
                    else
                    begin
                        edit_mode = D_EDIT_MODE_CREATE
                    end

                    i_next(winID, set_name = "DATA", "*FRST*")

                end
                ("DATA"),
                begin
                    ;;commit data
                    using edit_mode select
                    (D_EDIT_MODE_MODIFY),    ;;update mode
                    begin
                        result = user.IO.CompareAndSave()
                    end
                    (D_EDIT_MODE_CREATE),    ;;create mode
                        result = user.IO.Create()
                    endusing
                    if (!result)
                        u_message(user.IO.LastErrorMessage)
                    exitloop
                end
                endusing

.endc
            end
            ("MB_EXIT"),
            begin
                exitloop
            end
.ifdef UINameSpace
            ("COUNTRYMNT"),
                 CountryMaintenance(wm, countryObj)
            ("STATEMNT"),
                 StateMaintenance(wm, stateObj)
.endc
            endusing
        end

        ;;show any changes made to the database
        TransactionViewer.ShowView(winTitle)

.ifdef UINameSpace
        user.DataTable.Cancel()
.endc
    end
    catch (e, @Exception)
    begin
        u_message(e.Message)
    end
    endtry

    wm.Environment(false, "")

.ifdef UINameSpace
    countryObj.DataTable.PerformReloadTable=false
    stateObj.DataTable.PerformReloadTable=false
.endc

    xreturn

endsubroutine

