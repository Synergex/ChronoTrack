;;*****************************************************************************
;;
;; Routine:     user_create
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
;;
;; ChronoTrack is an application written and managed by the Synergex Professional Services Group.
;;
;;***********************************************************************************
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by <CODEGEN_VERSION>.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
;;
;; Possible return values from this routine are:
;;
;;   true   Table created
;;   false  Error (see a_errtxt)
;;
function user_create ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in process
        errtxt      ,a512       ;;Returned error message text
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Create the database table and primary key
    ;;
    if (ok)
    begin
        sql = "CREATE TABLE USERS ("
        & + "USER_ID VARCHAR(15) NOT NULL,"
        & + "INACTIVE DECIMAL(1),"
        & + "FIRST_NAME VARCHAR(30) NOT NULL,"
        & + "LAST_NAME VARCHAR(30) NOT NULL,"
        & + "TITLE VARCHAR(30),"
        & + "ADDR1 VARCHAR(30),"
        & + "ADDR2 VARCHAR(30),"
        & + "ADDR3 VARCHAR(30),"
        & + "ADDR4 VARCHAR(30),"
        & + "STATE VARCHAR(2),"
        & + "ZIP VARCHAR(10),"
        & + "COUNTRY_ID VARCHAR(2) NOT NULL,"
        & + "OFFICE_PHONE VARCHAR(20),"
        & + "MOBILE_PHONE VARCHAR(20),"
        & + "EMAIL VARCHAR(70) NOT NULL,"
        & + "IS_EMPLOYEE DECIMAL(1),"
        & + "IS_MANAGER DECIMAL(1),"
        & + "IS_CONSULTANT DECIMAL(1),"
        & + "PICTURE_FILE VARCHAR(255),"
        & + "FRIENDLY_NAME VARCHAR(60),"
        & + "REPLICATION_KEY VARCHAR(20),"
        & + "CONSTRAINT PK_USER PRIMARY KEY CLUSTERED"
        & + " (USER_ID ASC))"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 1 (Users by email address)
    ;;
    if (ok)
    begin
        sql = "CREATE UNIQUE INDEX IX_USER_USER_KEY1 "
        &     "ON USERS(EMAIL ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 2 (Users by last name)
    ;;
    if (ok)
    begin
        sql = "CREATE INDEX IX_USER_USER_KEY2 "
        &     "ON USERS(LAST_NAME ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 3 (SQL Timestamp Key)
    ;;
    if (ok)
    begin
        sql = "CREATE UNIQUE INDEX IX_USER_REPLICATION_KEY "
        &     "ON USERS(REPLICATION_KEY ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Grant access permissions
    ;;
    if (ok)
    begin
        sql = "GRANT ALL ON USERS TO PUBLIC"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

;------------------------------------------------------------------------------
;;Open a cursor
;;
open_cursor,

    if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    return

;;-----------------------------------------------------------------------------
;;Execute a cursor
;;
execute_cursor,

    if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to execute SQL statement"
    end

    return

;;-----------------------------------------------------------------------------
;;Close a cursor
;;
close_cursor,

    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
        clear cursor
    end

    return

endfunction

;;*****************************************************************************
;;
;; Routine:      user_drop
;;
;; Author:       CodeGen (Steve Ives)
;;
;; Company:      Synergex
;;
;; Created:      04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;   true   Table dropped
;;   false  Error (see a_errtxt)
;;
function user_drop ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in progress
        errtxt      ,a256       ;;Returned error message text
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open cursor for DROP TABLE statement
    ;;
    if (ok)
    begin
        if (%ssc_open(a_dbchn,cursor,"DROP TABLE USERS",SSQL_NONSEL)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Execute DROP TABLE statement
    ;;
    if (ok)
    begin
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_NORMAL) then
            begin
                ;;Check if the error was that the table did not exist
                if (dberror==-3701) then
                    clear errtxt
                else
                    ok = false
            end
            else
            begin
                errtxt="Failed to execute SQL statement"
                ok = false
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine

    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     user_delete_row
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    row deleted
;;  false   Error (see a_errtxt)
;;
function user_delete_row ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    required in  a_repkey   ,a      ;;Replication key
    optional out a_errtxt   ,a      ;;Error text
    endparams

    ;;Note: Primary key segments or a_where must be specified.

    .include "CONNECTDIR:ssql.def"
    .include "USER" repository, stack record="user"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in progress
        errtxt      ,a256       ;;Error message text
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the DELETE statement
    ;;
    if (ok)
    begin
        sql = "DELETE FROM USERS WHERE REPLICATION_KEY=:1"
        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,,1,a_repkey)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Execute the query
    ;;
    if (ok)
    begin
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     user_exists
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*******************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  -1  An error occurred
;;  0   Table does not exist
;;  1   Table exists
;;
function user_exists ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "USER" repository, stack record="user"

    stack record local_data
        error       ,int    ;;Returned error number
        dberror     ,int    ;;Database error number
        cursor      ,int    ;;Database cursor
        length      ,int    ;;Length of a string
        table_name  ,a128   ;;Retrieved table name
        errtxt      ,a256   ;;Error message text
    endrecord

proc

    init user,local_data

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the SELECT statement
    ;;
    if (%ssc_open(a_dbchn,cursor,"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES "
    &   "WHERE TABLE_NAME='USERS'",SSQL_SELECT)==SSQL_FAILURE)
    begin
        error=-1
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    ;;-------------------------------------------------------------------------
    ;;Bind host variables to receive the data
    ;;
    if (!error)
    begin
        if (%ssc_define(a_dbchn,cursor,1,table_name)==SSQL_FAILURE)
        begin
            error=-1
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variable"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Move data to host variables
    ;;
    if (!error)
    begin
        if (%ssc_move(a_dbchn,cursor,1)==SSQL_NORMAL)
                error = 1 ;; Table exists
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (!error)
            begin
                error=-1
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (error) then
            a_errtxt=errtxt
        else
            clear a_errtxt
    end

    freturn error

endfunction

;;*****************************************************************************
;;
;; Routine:     user_insert_row
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Row inserted
;;  false   Error (see a_errtxt)
;;
function user_insert_row ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    required in  a_data     ,a      ;;Record containing data to insert
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "USER" repository, stack record="user"

    external function
        IsNumeric   ,^val
    endexternal

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        cnt         ,int        ;;Generic counter
        transaction ,int        ;;Transaction in progress
        length      ,int        ;;Length of a string
        errtxt      ,a256       ;;Error message text
    endrecord

    static record
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the INSERT statement
    ;;
    if (ok)
    begin
        if (!(a)sql)
        begin
            sql = "INSERT INTO USERS ("
            & + "USER_ID,"
            & + "INACTIVE,"
            & + "FIRST_NAME,"
            & + "LAST_NAME,"
            & + "TITLE,"
            & + "ADDR1,"
            & + "ADDR2,"
            & + "ADDR3,"
            & + "ADDR4,"
            & + "STATE,"
            & + "ZIP,"
            & + "COUNTRY_ID,"
            & + "OFFICE_PHONE,"
            & + "MOBILE_PHONE,"
            & + "EMAIL,"
            & + "IS_EMPLOYEE,"
            & + "IS_MANAGER,"
            & + "IS_CONSULTANT,"
            & + "PICTURE_FILE,"
            & + "FRIENDLY_NAME,"
            & + "REPLICATION_KEY"
            & + ") VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21)"
        end

        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Bind the host variables for data to be inserted
    ;;
    if (ok)
    begin
        if (%ssc_bind(a_dbchn,cursor,21,
        &    user.user_id,
        &    user.inactive,
        &    user.first_name,
        &    user.last_name,
        &    user.title,
        &    user.addr1,
        &    user.addr2,
        &    user.addr3,
        &    user.addr4,
        &    user.state,
        &    user.zip,
        &    user.country_id,
        &    user.office_phone,
        &    user.mobile_phone,
        &    user.email,
        &    user.is_employee,
        &    user.is_manager,
        &    user.is_consultant,
        &    user.picture_file,
        &    user.friendly_name,
        &    user.replication_key
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Insert the row into the database
    ;;
    if (ok)
    begin
        ;;Load data into bound record
        user = a_data

        ;;Clean up the data
        user.user_id=%atrim(user.user_id)+%char(0)
        if ((!user.inactive)||(!%IsNumeric(^a(user.inactive))))
            clear user.inactive
        user.first_name=%atrim(user.first_name)+%char(0)
        user.last_name=%atrim(user.last_name)+%char(0)
        user.title=%atrim(user.title)+%char(0)
        user.addr1=%atrim(user.addr1)+%char(0)
        user.addr2=%atrim(user.addr2)+%char(0)
        user.addr3=%atrim(user.addr3)+%char(0)
        user.addr4=%atrim(user.addr4)+%char(0)
        user.state=%atrim(user.state)+%char(0)
        user.zip=%atrim(user.zip)+%char(0)
        user.country_id=%atrim(user.country_id)+%char(0)
        user.office_phone=%atrim(user.office_phone)+%char(0)
        user.mobile_phone=%atrim(user.mobile_phone)+%char(0)
        user.email=%atrim(user.email)+%char(0)
        if ((!user.is_employee)||(!%IsNumeric(^a(user.is_employee))))
            clear user.is_employee
        if ((!user.is_manager)||(!%IsNumeric(^a(user.is_manager))))
            clear user.is_manager
        if ((!user.is_consultant)||(!%IsNumeric(^a(user.is_consultant))))
            clear user.is_consultant
        user.picture_file=%atrim(user.picture_file)+%char(0)
        user.friendly_name=%atrim(user.friendly_name)+%char(0)
        user.replication_key=%atrim(user.replication_key)+%char(0)

        ;;Execute INSERT statement
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     user_insert_rows
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Rows inserted
;;  false   Error (see a_errtxt)
;;
function user_insert_rows ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    required in  a_data     ,int    ;;Memory handle with records to insert
    optional out a_errtxt   ,a      ;;Error text
    optional out a_exception,int    ;;Handle to return exception records
    optional in  a_terminal ,int    ;;Terminal number channel to log errors on
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "USER" repository, stack record="user"
    .include "USER" repository, structure="inpbuf", nofields

    external function
        IsNumeric   ,^val
    endexternal

    .define EXCEPTION_BUFSZ 100

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        rows        ,int        ;;Number of rows to insert
        cursor      ,int        ;;Database cursor
        cnt         ,int        ;;Generic counter
        transaction ,int        ;;Transaction in progress
        length      ,int        ;;Length of a string
        ex_ms       ,int        ;;Size of exception array
        ex_mc       ,int        ;;Items in exception array
        continue    ,int        ;;Continue after an error
        errtxt      ,a512       ;;Error message text
    endrecord

    static record
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    if (^passed(a_exception)&&a_exception)
        clear a_exception

    ;;-------------------------------------------------------------------------
    ;;Figure out how many rows to insert
    ;;
    rows = (%mem_proc(DM_GETSIZE,a_data)/^size(user))

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the INSERT statement
    ;;
    if (ok)
    begin
        if (!(a)sql)
        begin
            sql = "INSERT INTO USERS ("
            & + "USER_ID,"
            & + "INACTIVE,"
            & + "FIRST_NAME,"
            & + "LAST_NAME,"
            & + "TITLE,"
            & + "ADDR1,"
            & + "ADDR2,"
            & + "ADDR3,"
            & + "ADDR4,"
            & + "STATE,"
            & + "ZIP,"
            & + "COUNTRY_ID,"
            & + "OFFICE_PHONE,"
            & + "MOBILE_PHONE,"
            & + "EMAIL,"
            & + "IS_EMPLOYEE,"
            & + "IS_MANAGER,"
            & + "IS_CONSULTANT,"
            & + "PICTURE_FILE,"
            & + "FRIENDLY_NAME,"
            & + "REPLICATION_KEY"
            & + ") VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21)"
        end

        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = true
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Bind the host variables for data to be inserted
    ;;
    if (ok)
    begin
        if (%ssc_bind(a_dbchn,cursor,21,
        &    user.user_id,
        &    user.inactive,
        &    user.first_name,
        &    user.last_name,
        &    user.title,
        &    user.addr1,
        &    user.addr2,
        &    user.addr3,
        &    user.addr4,
        &    user.state,
        &    user.zip,
        &    user.country_id,
        &    user.office_phone,
        &    user.mobile_phone,
        &    user.email,
        &    user.is_employee,
        &    user.is_manager,
        &    user.is_consultant,
        &    user.picture_file,
        &    user.friendly_name,
        &    user.replication_key
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Insert the rows into the database
    ;;
    if (ok)
    begin
        for cnt from 1 thru rows
        begin
            ;;Load data into bound record
            user = ^m(inpbuf[cnt],a_data)

            ;;Clean up the data
            user.user_id=%atrim(user.user_id)+%char(0)
            if ((!user.inactive)||(!%IsNumeric(^a(user.inactive))))
                clear user.inactive
            user.first_name=%atrim(user.first_name)+%char(0)
            user.last_name=%atrim(user.last_name)+%char(0)
            user.title=%atrim(user.title)+%char(0)
            user.addr1=%atrim(user.addr1)+%char(0)
            user.addr2=%atrim(user.addr2)+%char(0)
            user.addr3=%atrim(user.addr3)+%char(0)
            user.addr4=%atrim(user.addr4)+%char(0)
            user.state=%atrim(user.state)+%char(0)
            user.zip=%atrim(user.zip)+%char(0)
            user.country_id=%atrim(user.country_id)+%char(0)
            user.office_phone=%atrim(user.office_phone)+%char(0)
            user.mobile_phone=%atrim(user.mobile_phone)+%char(0)
            user.email=%atrim(user.email)+%char(0)
            if ((!user.is_employee)||(!%IsNumeric(^a(user.is_employee))))
                clear user.is_employee
            if ((!user.is_manager)||(!%IsNumeric(^a(user.is_manager))))
                clear user.is_manager
            if ((!user.is_consultant)||(!%IsNumeric(^a(user.is_consultant))))
                clear user.is_consultant
            user.picture_file=%atrim(user.picture_file)+%char(0)
            user.friendly_name=%atrim(user.friendly_name)+%char(0)
            user.replication_key=%atrim(user.replication_key)+%char(0)

            ;;Execute the statement
            if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
            begin
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to execute SQL statement"

                clear continue

                ;;Are we logging errors?
                if (^passed(a_terminal)&&(a_terminal))
                begin
                    writes(a_terminal,errtxt(1:length))
                    continue=1
                end

                ;;Are we processing exceptions?
                if (^passed(a_exception))
                begin
                    if (ex_mc==ex_ms)
                    begin
                        if (!a_exception) then
                            a_exception = %mem_proc(DM_ALLOC|DM_STATIC,^size(inpbuf)*(ex_ms=EXCEPTION_BUFSZ))
                        else
                            a_exception = %mem_proc(DM_RESIZ,^size(inpbuf)*(ex_ms+=EXCEPTION_BUFSZ),a_exception)
                    end
                    ^m(inpbuf[ex_mc+=1],a_exception)=user
                    continue=1
                end

                if (continue) then
                    nextloop
                else
                begin
                    ok = false
                    exitloop
                end
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If we're returning exceptions then resize the buffer to the correct size
    ;;
    if (^passed(a_exception)&&a_exception)
        a_exception = %mem_proc(DM_RESIZ,^size(inpbuf)*ex_mc,a_exception)

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=%atrim(errtxt)+" [Database error "+%string(dberror)+"]"
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     user_load
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Table loaded
;;  false   Error (see a_errtxt)
;;
function user_load ,^val

    required in  a_dbchn    ,int        ;;Connected database channel
    optional out a_errtxt   ,a          ;;Error text
    optional in  a_logex    , boolean   ;;Log exception records
    optional in  a_terminal ,int        ;;Terminal channel to log errors on
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "USER" repository, structure="user"
    .include "USER" repository, stack record="tmprec"

    .define BUFFER_ROWS 1000
    .define EXCEPTION_BUFSZ 100

    stack record local_data
        ok      ,boolean    ;;Return status
        filechn ,int        ;;Data file channel
        mh      ,int        ;;Memory handle containing data to insert
        ms      ,int        ;;Size of memory buffer in rows
        mc      ,int        ;;Memory buffer rows currently used
        ex_mh   ,int        ;;Memory buffer for exception records
        ex_mc   ,int        ;;Number of records in returned exception array
        ex_ch   ,int        ;;Exception log file channel
        cnt     ,int        ;;Loop counter
        errtxt  ,a256       ;;Error message text
    endrecord

proc

    init local_data
    ok = true

    ;;Open the data file associated with the structure
    begin
        open(filechn=%syn_freechn,i:i,"DAT:user.ism") [ERR=fnf]
        exit
fnf,    ok = false
        errtxt = "Failed to open file DAT:user.ism"
        clear filechn
    end

    if (ok)
    begin

        ;;Allocate memory buffer for the database rows
        mh = %mem_proc(DM_ALLOC,^size(user)*(ms=BUFFER_ROWS))

        ;;Read records from the input file
        repeat
        begin

            ;;Get the next record from the input file
            reads(filechn,tmprec,eof)

            ;;Got one, load it into or buffer
            ^m(user[mc+=1],mh) = tmprec

            ;;If the buffer is full, write it to the database
            if (mc==ms)
                call insert_data

            if (!ok)
                exitloop

        end

eof,    ;;Any data waiting to be written?
        if (mc)
        begin
            mh = %mem_proc(DM_RESIZ,^size(user)*mc,mh)
            call insert_data
        end

        ;;Deallocate memory buffer
        mh = %mem_proc(DM_FREE,mh)

    end

    ;;Close the file
    if (filechn)
        close filechn

    ;;Close the exceptions log file
    if (ex_ch)
        close ex_ch

    ;;Return the error text
    if (^passed(a_errtxt))
        a_errtxt = errtxt

    freturn ok

insert_data,

    if (%user_insert_rows(a_dbchn,mh,errtxt,ex_mh,a_terminal))
    begin
        ;;Any exceptions?
        if (ex_mh)
        begin
            ;;Are we logging exceptions?
            if (^passed(a_logex)&&a_logex) then
            begin
                ;;Open the log file
                if (!ex_ch)
                    open(ex_ch=%syn_freechn,o:s,"exceptions_user.log")
                ;;How many exceptions to log?
                ex_mc = (%mem_proc(DM_GETSIZE,ex_mh)/^size(user))
                ;;Log the exceptions
                for cnt from 1 thru ex_mc
                    writes(ex_ch,^m(user[cnt],ex_mh))
                if (^passed(a_terminal)&&a_terminal)
                    writes(a_terminal,"Exceptions were logged to exceptions_user.log")
            end
            else
            begin
                ;;No, report and error
                ok = false
            end
            ;;Release the exception buffer
            ex_mh=%mem_proc(DM_FREE,ex_mh)
        end
    end

    clear mc

    return

endfunction

;;*****************************************************************************
;;
;; Routine:     user_update_row
;;
;; Author:      CodeGen (Steve Ives)
;;
;; Company:     Synergex
;;
;; Created:     04/21/2009 at 11:07
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V3.2.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Success, row was updated
;;  false   Error, see a_errtxt for details
;;
function user_update_row ,^val

    required in  a_dbchn    ,int    ;Connected database channel
    required in  a_data     ,a      ;Record containing data to insert
    optional out a_rows     ,int    ;Number of rows affected
    optional out a_errtxt   ,a      ;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "USER" repository, stack record="user"

    stack record local_data
        ok          ,boolean    ;;OK to continue
        transaction ,boolean    ;;Transaction in progress
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        rows        ,int        ;;Number of rows updated
        errtxt      ,a256       ;;Error message text
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    if (^passed(a_rows))
        clear a_rows

    ;;-------------------------------------------------------------------------
    ;;Load the data into the bound record
    ;;
    user=a_data

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction = true
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the UPDATE statement
    ;;
    if (ok)
    begin
        sql = "UPDATE USERS SET "
        & + "USER_ID=:1,"
        & + "INACTIVE=:2,"
        & + "FIRST_NAME=:3,"
        & + "LAST_NAME=:4,"
        & + "TITLE=:5,"
        & + "ADDR1=:6,"
        & + "ADDR2=:7,"
        & + "ADDR3=:8,"
        & + "ADDR4=:9,"
        & + "STATE=:10,"
        & + "ZIP=:11,"
        & + "COUNTRY_ID=:12,"
        & + "OFFICE_PHONE=:13,"
        & + "MOBILE_PHONE=:14,"
        & + "EMAIL=:15,"
        & + "IS_EMPLOYEE=:16,"
        & + "IS_MANAGER=:17,"
        & + "IS_CONSULTANT=:18,"
        & + "PICTURE_FILE=:19,"
        & + "FRIENDLY_NAME=:20,"
        & + "REPLICATION_KEY=:21"
        & + " WHERE"
        & + " USER_ID='" + %atrim(^a(user.user_id)) + "'"

        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Bind the host variables for the data to update
    ;;
    if (ok)
    begin
        if (%ssc_bind(a_dbchn,cursor,21,
        &    user.user_id,
        &    user.inactive,
        &    user.first_name,
        &    user.last_name,
        &    user.title,
        &    user.addr1,
        &    user.addr2,
        &    user.addr3,
        &    user.addr4,
        &    user.state,
        &    user.zip,
        &    user.country_id,
        &    user.office_phone,
        &    user.mobile_phone,
        &    user.email,
        &    user.is_employee,
        &    user.is_manager,
        &    user.is_consultant,
        &    user.picture_file,
        &    user.friendly_name,
        &    user.replication_key
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Update the row in the database
    ;;
    if (ok)
    begin
        if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD,,rows)==SSQL_NORMAL) then
        begin
            if (^passed(a_rows))
                a_rows = rows
        end
        else
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Return error message
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

