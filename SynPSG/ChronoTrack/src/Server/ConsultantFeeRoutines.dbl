;;**********************************************************************
;;
;; Title:       ConsultantFeeRoutines.dbl
;;
;; Type:        Subroutine (collection)
;;
;; Description: routines to allow remote access to the consultant_fee data file
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
;;
;; ChronoTrack is an application written and managed by the Synergex Professional Services Group.
;;
;;***********************************************************************************

.include "DEF:ChronoTrack.def"
.include "CONSULTANT_FEE" repository, structure="sConsultantFee", end

;;; <summary>
;;; get_consultant_fee
;;; </summary>
;;; <remarks>
;;; using the passed key locate te required consultatn fee record on the primary key
;;; </remark>
;;; <return type="Boolean">true = success, false = error</returns>
function get_consultant_fee         ,boolean
    required in  userToken          ,a22
    required in  consultantID       ,a15
    required in  feeID              ,d2
    required out consultantFeeData  ,sConsultantFee
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;attempt to locate given key value
    result = ConsultantFeeDataEntity.Instance.IO.Locate(consultantID+%string(feeID,"XX"),Q_PRIMARY,false)

    ;;set the data area
    consultantFeeData = ConsultantFeeDataEntity.Instance.IO.DataArea

    ;;record any possible error message
    lastErrorMsg = ConsultantFeeDataEntity.Instance.IO.LastErrorMessage

    freturn result

endfunction

;;; <summary>
;;; create_consultant_fee
;;; </summary>
;;; <remarks>
;;; pass in the record data and attempt to create it
;;; </remark>
;;; <return type="Boolean">true = success, false = error</returns>
function create_consultant_fee          ,boolean
    required in    userToken            ,a22
    required inout consultantFeeData    ,sConsultantFee
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;set the data area
    ConsultantFeeDataEntity.Instance.IO.DataArea = consultantFeeData

    ;;create the record
    result = ConsultantFeeDataEntity.Instance.IO.Create()
    consultantFeeData = ConsultantFeeDataEntity.Instance.IO.DataArea
    lastErrorMsg = ConsultantFeeDataEntity.Instance.IO.LastErrorMessage

    freturn result

endfunction

;;; <summary>
;;; get_Consultantfee_table
;;; return the ConsultantFee data as a Array List
;;; </summary>
;;; <remarks>
;;; Return the contents of the consultant_fee file as an array list which is
;;; then converted to a DataTable by xfNetLink.NET
;;; </remark>
;;; <return type="Boolean">true = success, false = error</returns>
function get_consultantFee_table    ,boolean
    required in  userToken          ,a22
    required in  consultantID       ,a15
    required out consultantFeeTable ,@ArrayList
    endparams

    .include "DEF:Server.def"

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;create the collection
    consultantFeeTable = ConsultantFeeDataEntity.Instance.DataCollection.Collection(consultantID, Q_PRIMARY)

    ;;always returns true
    freturn true

endfunction

;;; <summary>
;;; update_consultant_fee
;;; </summary>
;;; <remarks>
;;; pass in the modified record and attempt an update
;;; </remark>
;;; <return type="Boolean">true = success, false = error</returns>
function update_consultant_fee      ,boolean
    required in  userToken          ,a22
    required in  consultantFeeData  ,sConsultantFee
    required out newGrfa            ,a22
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;set the data area
    ConsultantFeeDataEntity.Instance.IO.DataArea = consultantFeeData

    ;;update the record
    result = ConsultantFeeDataEntity.Instance.IO.CompareAndSave()
    lastErrorMsg = ConsultantFeeDataEntity.Instance.IO.LastErrorMessage

    newGrfa = ConsultantFeeDataEntity.Instance.IO.GRFA

    freturn result

endfunction

;;; <summary>
;;; delete_consultant_fee
;;; </summary>
;;; <remarks>
;;; pass in the record to delete
;;; </remark>
;;; <return type="Boolean">true = success, false = error</returns>
function delete_consultant_fee      ,boolean
    required in  userToken          ,a22
    required in  consultantFeeData  ,sConsultantFee
    endparams

    .include "DEF:Server.def"

    stack record
        result  ,boolean
    endrecord

proc
    ;;check we have a valid logged in user
    if (!%CheckLogin(userToken))
        freturn false

    ;;set the data area
    ConsultantFeeDataEntity.Instance.IO.DataArea = consultantFeeData

    ;;delete the record
    result = ConsultantFeeDataEntity.Instance.IO.FindAndDelete()
    lastErrorMsg = ConsultantFeeDataEntity.Instance.IO.LastErrorMessage

    freturn result

endfunction

